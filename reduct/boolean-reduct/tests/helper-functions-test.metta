! (register-module! ../../../../metta-moses)

! (import! &self metta-moses:utilities:general-helpers)
! (import! &self metta-moses:reduct:boolean-reduct:rte-helpers)

;; Test for getGuardSetExp

;; Test 01 - getGuardSet of an empty set
! (assertEqualToResult (getGuardSetExp () () ()) (()))

;; Test 02 - getGuardSet of a literal
! (assertEqualToResult (getGuardSetExp A A ()) ((A)))
! (assertEqualToResult (getGuardSetExp (A) (A) ()) ((A)))

;; Test 02 - getGuardSet of OR and NOT expressions
! (assertEqualToResult (getGuardSetExp (OR) (OR) ()) (()))
! (assertEqualToResult (getGuardSetExp (OR A B (NOT A)) (OR A B (NOT A)) ()) (()))
! (assertEqualToResult (getGuardSetExp (OR (AND A B) (AND A B) (NOT A)) (OR (AND A B) (AND A B) (NOT A)) ()) (()))

;; Test 03 - getGuardSet of AND expressions
! (assertEqualToResult (getGuardSetExp (AND) (AND) ()) (()))
! (assertEqualToResult (getGuardSetExp (AND A) (AND A) ()) ((A)))
! (assertEqualToResult (getGuardSetExp (AND (NOT A) (NOT B) A) (AND (NOT A) (NOT B) A) ()) ((A (NOT B) (NOT A))))
! (assertEqualToResult (getGuardSetExp (AND A (AND A B) (OR A B) (NOT B)) (AND A (AND A B) (OR A B) (NOT B)) ()) (((NOT B) A)))
! (assertEqualToResult (getGuardSetExp (AND (AND A B) A) (AND (AND A B) A) ()) ((A)))
! (assertEqualToResult (getGuardSetExp (AND A B (NOT B)) (AND A B (NOT B)) ()) (((NOT B) B A)))
! (assertEqualToResult (getGuardSetExp (AND A (NOT A) (NOT B)) (AND A (NOT A) (NOT B)) ()) (((NOT B) (NOT A) A)))
! (assertEqualToResult (getGuardSetExp (AND (NOT A) A B) (AND (NOT A) A B) ()) ((B A (NOT A))))

;; Test for isConsistentExp
 ! (assertEqualToResult (isConsistentExp ()) (True))
 ! (assertEqualToResult (isConsistentExp A) (True))
 ! (assertEqualToResult (isConsistentExp (A)) (True))
 ! (assertEqualToResult (isConsistentExp (AND)) (True))
 ! (assertEqualToResult (isConsistentExp (AND (OR A B) (AND A B) A B)) (True))
 ! (assertEqualToResult (isConsistentExp (AND (NOT A) (NOT B) A)) (False))
 ! (assertEqualToResult (isConsistentExp (AND A B (NOT B))) (False))
 ! (assertEqualToResult (isConsistentExp (OR A B (NOT A))) (True))
 ! (assertEqualToResult (isConsistentExp (OR (AND A B) (AND A B) (NOT A))) (True))
 ! (assertEqualToResult (isConsistentExp (AND A (NOT A) (NOT B))) (False))

 ! (assertEqualToResult (nodeHasChildExp (AND A B)) (True))
 ! (assertEqualToResult (nodeHasChildExp (AND A B C)) (True))
 ! (assertEqualToResult (nodeHasChildExp (OR A B C)) (True))
 ! (assertEqualToResult (nodeHasChildExp (A)) (False))
 ! (assertEqualToResult (nodeHasChildExp A) (False))
 ! (assertEqualToResult (nodeHasChildExp (AND)) (False))
 ! (assertEqualToResult (nodeHasChildExp AND) (False))


; Test cases for getGsetAndChildren function.

; Test case 1: Simple AND expression
; Input: (AND A B (OR A B) C)
; Expected Output: ((A B C) ((OR A B)))
(= (testGetGsetAndChildrenCase1)
    (let* 
        (
            ($expr (AND A B (OR A B) C))
            ($expectedGuardSets (A B C))
            ($expectedChildren ((OR A B)))
            ($result (getGsetAndChildren $expr))
        )
        (if (== $result (tuple $expectedGuardSets $expectedChildren))  ; Use tuple for comparison
            "Test Case 1 Passed"
            (str "Test Case 1 Failed: Expected " (tuple $expectedGuardSets $expectedChildren) " but got " $result)
        )
    )
)

; Test case 2: Simple OR expression
; Input: (OR A B (AND A B) C)
; Expected Output: ((A B C) ((AND A B)))
(= (testGetGsetAndChildrenCase2)
    (let* 
        (
            ($expr (OR A B (AND A B) C))
            ($expectedGuardSets (A B C))
            ($expectedChildren ((AND A B)))
            ($result (getGsetAndChildren $expr))
        )
        (if (== $result (tuple $expectedGuardSets $expectedChildren))  ; Use tuple for comparison
            "Test Case 2 Passed"
            (str "Test Case 2 Failed: Expected " (tuple $expectedGuardSets $expectedChildren) " but got " $result)
        )
    )
)
